# Generated through Fastapi-CLI


from http import HTTPStatus
from fastapi import Request
from sqlalchemy import select
from sqlalchemy.orm import Session
from ${namespace}.lib.core.base_controller import BaseController
from ${namespace}.models.${name}_model import ${uc_name}Model
from api.validators.base_validator import SendResponse
from api.validators.${name}_validator import ${uc_name}List


class ${uc_name}Controller(BaseController):

    def __init__(self, req: Request, DB: Session, tables: list = None):
        super().__init__(req, DB, tables)
        # self.__model = ${uc_name}Model


    def get_list(self, page_no: int, limit: int) -> SendResponse:
        _model = self.get_model('${name}')
        self.setPageNo(page_no)
        self.setLimit(limit)

        '''
            Your Implementation to Get List
        '''

        # resp_data = self.get_parsed_data(${uc_name}List, TO_BE_CONVERT_DATA, json_column=[])
        return self.send_success([], show_page_info=True)
    

    def get_item(self, ${name}_id: int):
        _model = self.get_model('${name}')
        # db_row = self._db.scalars(select(self.__model).where(self.__model.id == ${name}_id)).first()
        
        # resp_data = self.get_parsed_data(${uc_name}List, TO_BE_CONVERT_DATA, json_column=[])
        return self.send_success({})


    def create(self, post_data: dict) -> SendResponse:
        _model = self.get_model('${name}')
        '''
            Your Implementaion to Save Data
        '''

        # resp_data = self.get_parsed_data(${uc_name}List, TO_BE_CONVERT_DATA, json_column=[])
        return self.send_success(msg="Your Data Is Saved.", code=HTTPStatus.CREATED)

    
    def update(self, put_data: dict) -> SendResponse:
        _model = self.get_model('${name}')
        '''
            Your Implementaion to Update Data
        '''

        # resp_data = self.get_parsed_data(${uc_name}List, TO_BE_CONVERT_DATA, json_column=[])
        return self.send_success(msg="Your Data Is Updated.")
    

    def delete(self, del_data: dict) -> SendResponse:
        _model = self.get_model('${name}')
        '''
            Your Implementaion to Delete Data
        '''

        # resp_data = self.get_parsed_data(${uc_name}List, TO_BE_CONVERT_DATA, json_column=[])
        return self.send_success(msg="Your Data Is Deleted.")