import logging
from fastapi import Request
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from ${namespace}.lib.core.helpers import get_env_value

logger = logging.getLogger(__name__)
logging.basicConfig(format='%(levelname)s: %(asctime)s %(name)s : %(message)s', datefmt="%Y-%m-%d")

Base = None

try:
    DB_DIALECT = get_env_value('DB_DIALECT')
    DB_NAME = get_env_value('DB_NAME')
    DB_HOST = get_env_value('DB_HOST')
    DB_PORT = get_env_value('DB_PORT')
    DB_USER = get_env_value('DB_USER')
    DB_PASS = get_env_value('DB_PASS')

    engine = create_engine(f"{DB_DIALECT}://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}")
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

    Base = declarative_base()

except Exception as e:
    logger.error(e.args[0])
    exit(1)


async def get_connection(req: Request):
    req.state.DB = SessionLocal