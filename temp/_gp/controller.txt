import math, json
from os import environ
from datetime import datetime
from email.utils import format_datetime
from fastapi import Request
from fastapi.responses import JSONResponse
from sqlalchemy.orm import Session
from sqlalchemy import select, func
from api.validators.base_validator import ResponseType
from api.validators.base_validator import SendResponse
from api.validators.base_validator import HTTPStatus


class _page_information(object):
    limit: int = environ.get('PER_PAGE', default=20)
    offset: int = 0
    page: int = environ.get('CURR_PAGE', default=1)
    row_count: int = 0

    def __dict__(self):
        return dict(
            current_page=self.page,
            total_pages=math.ceil(self.row_count/self.limit),
            page_limit=self.limit
        )


class ${uc_name}Controller(object):

    def __init__(self, req: Request, DB: Session = None, tables: list|dict = None):
        self._request = req
        self.__db = DB() if DB is not None else (req.state.DB() if hasattr(req.state, 'DB') else None)
        self.__tables = tables
        self.__page_info = _page_information()

        self._response = SendResponse()


    @property
    def DBEngine(self) -> Session:
        return self.__db
        
    
    @property
    def get_page_information(self):
        return self.__page_info.__dict__()

    
    @property
    def GetClientIPAddress(self) -> str:
        return self._request.client.host


    @property
    def get_device(self) -> str:
        return self._request.cookies.get('device_id')

    
    @property
    def SessionUserInfo(self) -> dict:
        return self._request.state.user

    
    def __cookie(self, cookie: dict, _c: dict = None) -> dict:
        if 'key' in cookie and 'value' in cookie:
            _c = {"key": "device_id", "value": cookie['value']}
            
            if 'max_age' in cookie and cookie['max_age'] is not None:
                _c["max-age"] = cookie['max_age']
            if 'expires' in cookie and cookie['expires'] is not None:
                if isinstance(cookie['expires'], datetime):
                    _c["expires"] = format_datetime(cookie['expires'], usegmt=True)
                else:
                    _c["expires"] = cookie['expires']
            
            if 'path' in cookie and cookie['path'] is not None:
                _c["path"] = cookie['path']
            if 'domain' in cookie and cookie['domain'] is not None:
                _c["domain"] = cookie['domain']
            if 'secure' in cookie and cookie['secure']:
                _c["secure"] = True
            if 'httponly' in cookie and cookie['httponly']:
                _c["httponly"] = True
            if 'samesite' in cookie and cookie['samesite'] is not None:
                assert cookie['samesite'].lower() in [
                    "strict",
                    "lax",
                    "none",
                ], "samesite must be either 'strict', 'lax' or 'none'"
                _c["samesite"] = cookie['samesite']
        return _c

    
    def __set_cookies(self, cookies:dict|list, resp: JSONResponse) -> None:
        if isinstance(cookies, dict) is True:
            resp.set_cookie(**self.__cookie(cookies))
        elif isinstance(cookies, list) is True:
            (resp.set_cookie(**self.__cookie(c)) for c in cookies)

    
    def __get_hybrid_properties_value(self, obj, key_list: list = []):
        data = {}
        if not key_list or (key_list and len(key_list) == 0):
            return data
        
        for ef in key_list:
            if getattr(obj, ef):
                data[ef] = getattr(obj, ef)
        
        return data

    
    def __get_decoded_column(self, obj, key_list: list = []):
        if (key_list and len(key_list) > 0):
            for kl in key_list:
                if obj and obj[kl] and isinstance(obj[kl], str):
                    obj[kl] = json.loads(obj[kl])
        
        return obj

    
    def setPageNo(self, curr_page: int):
        self.__page_info.page = curr_page
        if self.__page_info.page > 1:
            self.__page_info.offset = (self.__page_info.limit * (self.__page_info.page - 1))


    def setLimit(self, per_page: int):
        self.__page_info.limit = per_page
    

    def setRowCounts(self, query):
        count = self.__db.execute(select(func.count()).select_from(query)).scalar()
        self.__page_info.row_count = count


    def send_error(self, msg: str | list) -> SendResponse:
        self._response.message = msg
        self._response.type = ResponseType.ERROR
        self._response.status = HTTPStatus.BAD_REQUEST

        return self._response


    def send_success(
        self, 
        data: dict | list | None = None, 
        msg: str = None, 
        show_page_info: bool = False, 
        code = HTTPStatus.OK,
        cookies: dict | list | None = None
    ) -> SendResponse:

        _resp = None
        self._response.data = data
        self._response.message = msg
        if show_page_info is True:
            self._response.pageinfo = self.get_page_information
        
        self._response.type = ResponseType.SUCCESS
        self._response.status = code

        if cookies is not None:
            _resp = JSONResponse(self._response.enum_dict())
            self.__set_cookies(cookies, _resp)
        
        else:
            _resp = JSONResponse(self._response.enum_dict())

        return _resp

    
    def get_model(self, model_name: str):
        return self.__tables[model_name] if model_name in self.__tables else None


    def get_parsed_data(self, pydantic_model, data, hybrid_properties: list = [], json_column: list = []) -> dict | list | None:
        if not data:
            return None
        
        return_data = None
        if isinstance(data, list) and data[0]:
            data_ = []
            for d in data:
                _d = (d.__dict__)
                _d.update(self.__get_hybrid_properties_value(d, hybrid_properties))
                hp = json.loads(pydantic_model(**_d).model_dump_json())
                hp = self.__get_decoded_column(hp, json_column)
                data_.append(hp)
            
            return_data = data_
        else:
            json_data = {}
            data_keys = data.__dict__.keys()
            if len(data_keys) == 1 and '_sa_instance_state' in data_keys:
                data_keys = data.__table__.columns
                for c in data_keys:
                    _key = c.key if not c.primary_key else 'id'
                    json_data[_key] = getattr(data, _key)
            else:
                json_data = data.__dict__
            
            json_data.update(self.__get_hybrid_properties_value(data, hybrid_properties))
            hp = json.loads((pydantic_model(**json_data).model_dump_json()))
            return_data = self.__get_decoded_column(hp, json_column)
        
        if not return_data:
            return_data = [] if isinstance(data, list) else {}

        return return_data