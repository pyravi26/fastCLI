#!/usr/bin/env python3

import sys, os, logging
from lib.helpers import *
from lib.projects import *
from lib.controllers import *
from lib.routers import *
from lib.models import *
from lib.validator import *

FORMAT = '%(asctime)s, %(levelname)s IN FILE: %(name)s, MSG: %(message)s'
logger = logging.getLogger(__name__)
logging.basicConfig(format=FORMAT, datefmt="%Y-%m-%d %H:%M:%S")

if __name__ == '__main__':
    curr_path = os.path.dirname(__file__)
    
    try:
        load_and_check = LoadAndCheck(__file__)
        if load_and_check.execute() is False:
            raise Exception("Unable to Load Files, Please reinstall FastCLI.")
                
        if len(sys.argv) <= 1:
            raise Exception("Invalid Argument, Exit")
        
        info = DataInfo(sys.argv, os.path.dirname(__file__), load_and_check)
        if info.get_command == '--help':
            complete_help()
        
        elif info.get_command != '--help' and info.get_command != '--':
            
            if info.get_command == '-project' or info.get_command == 'gp':
                Projects(info).gen_projects()
            
            elif os.path.isfile(f"{info.get_source_path}/.fastcli.conf.json"):

                if info.get_command == '-controller' or info.get_command == 'gc':
                    Controllers(info).generate() #.gen_controllers()
                
                if info.get_command == '-router' or info.get_command == 'gr' or info.get_parse_args["router"] is True:
                    Routers(info).generate()
                
                if info.get_command == '-model' or info.get_command == 'gm' or info.get_parse_args["module"] is True:
                    Models(info).generate()

                if info.get_command == '-validator' or info.get_command == 'gv' or info.get_parse_args["validator"] is True:
                    Validators(info).generate()
            
            else:
                raise Exception("Project is not generated by FastCLI Toolkit. If you want to use FastCLI Toolkit, please generate your project through FastCLI.")
        
        exit(0)
    
    except Exception as e:
        print("\n")
        logger.error(e.args[0])
        print('\n')
        exit(1)